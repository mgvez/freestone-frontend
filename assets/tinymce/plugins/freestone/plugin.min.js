/**
 * editor_plugin_src.js
 *
 * Copyright 2009, Moxiecode Systems AB
 * Released under LGPL License.
 *
 * License: http://tinymce.moxiecode.com/license
 * Contributing: http://tinymce.moxiecode.com/contributing
 */

(function(){

	// Load plugin specific language pack
	// tinymce.PluginManager.requireLangPack('vadmin');

	var openBanqueChooser = function(ed, url, b){
		try{
			var fieldId = ed.getParam('vadmin_fieldId', null);

			freestone.helpers.html.setSelection(fieldId, ed.selection.getContent());

			//add a temporary placeholder at current caret position
			ed.execCommand('mceInsertContent', false, '{bankPlaceholder}');
			freestone.getNavigController().loadBank(b, fieldId);
		} catch(e) {
			console.log(e);
		}
	}

	tinymce.create('tinymce.plugins.freestone', {
		/**
		 * Initializes the plugin, this will be executed after the plugin has been created.
		 * This call is done before the editor instance has finished it's initialization so use the onInit event
		 * of the editor instance to intercept that event.
		 *
		 * @param {tinymce.Editor} ed Editor instance that the plugin is initialized in.
		 * @param {string} url Absolute URL to where the plugin is located.
		 */

		 /*

		 /**/

		init : function(ed, url) {
			// Register the command so that it can be invoked by using tinyMCE.activeEditor.execCommand('mceExample');
			ed.addCommand('addImageFromBank', function() {
				openBanqueChooser(ed, url, 'images');
			});

			ed.addCommand('addDocFromBank', function() {
				openBanqueChooser(ed, url, 'docs');
			});

			ed.addCommand('insertInternalLink', function(){});

			ed.addButton('freestoneImageFromBank', {
				icon: "image",
				tooltip:"Insert image from image bank",
				cmd : 'addImageFromBank',
				// image : url + '/img/image.gif'
			});

			ed.addButton('freestoneDocFromBank', {
				cmd : 'addDocFromBank',
				tooltip:"Insert document from image bank",
				// icon:"editimage"
				icon:"browse"
				// image : url + '/img/doc.gif'
			});

			ed.addButton('freestoneLink', {
				tooltip:"Insert link",
				icon:"link",
				onclick: function() {
					var contentBefore = ed.getContent();
					var selection = ed.selection.getContent();
					ed.execCommand('mceInsertContent', false, '{{link}}');
					var contentAfter = ed.getContent();
					// var contentAfter = ed.setContent(contentBefore);

					// console.log(ed.selection.getContent());

					ed.execCommand('insertInternalLink', false, {
						contentBefore: contentBefore,
						contentAfter: contentAfter,
						selection: selection,
					});
				}
				// image : url + '/img/link_interne.gif'
			});

			// Add a node change handler, selects the button in the UI when a image is selected
			/*ed.onNodeChange.add(function(ed, cm, n) {
				cm.setActive('example', n.nodeName == 'IMG');
			});/**/
		},

		/**
		 * Creates control instances based in the incomming name. This method is normally not
		 * needed since the addButton method of the tinymce.Editor class is a more easy way of adding buttons
		 * but you sometimes need to create more complex controls like listboxes, split buttons etc then this
		 * method can be used to create those.
		 *
		 * @param {String} n Name of the control to create.
		 * @param {tinymce.ControlManager} cm Control manager to use inorder to create new control.
		 * @return {tinymce.ui.Control} New control instance or null if no control was created.
		 */
		createControl : function(n, cm) {
			return null;
		},

		/**
		 * Returns information about the plugin as a name/value array.
		 * The current keys are longname, author, authorurl, infourl and version.
		 *
		 * @return {Object} Name/value array containing information about the plugin.
		 */
		getInfo : function() {
			return {
				longname : 'Freestone plugin',
				author : 'Martin VÃ©zina',
				authorurl : 'http://tinymce.moxiecode.com',
				infourl : 'http://wiki.moxiecode.com/index.php/TinyMCE:Plugins/example',
				version : "1.0"
			};
		}
	});

	// Register plugin
	tinymce.PluginManager.add('freestone', tinymce.plugins.freestone);

})();
